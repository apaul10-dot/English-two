<%- include('../partials/header') %>
<link rel="stylesheet" href="/css/games.css">

<div class="game-container">
    <h1>Food Pairs Memory Game</h1>
    <div class="game-stats">
        <p>Moves: <span id="moves">0</span></p>
        <p>Pairs Found: <span id="pairs">0</span>/8</p>
        <p>Time: <span id="timer">0</span>s</p>
    </div>
    <div class="memory-game"></div>
    <button id="restart-btn">Restart Game</button>
</div>

<style>
.game-container {
    max-width: 900px;
    margin: 40px auto;
    padding: 20px;
    text-align: center;
}

.game-stats {
    display: flex;
    justify-content: center;
    gap: 40px;
    margin: 20px 0;
    font-size: 1.2rem;
}

.game-stats span {
    font-weight: bold;
    color: #1a73e8;
}

.memory-game {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 15px;
    margin: 30px auto;
    max-width: 800px;
}

.memory-card {
    aspect-ratio: 3/4;
    background: #1a73e8;
    border-radius: 10px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0;
    transform-style: preserve-3d;
    transition: transform 0.5s;
}

.memory-card.flipped {
    transform: rotateY(180deg);
}

.memory-card .front,
.memory-card .back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    color: white;
    padding: 10px;
    text-align: center;
}

.memory-card .front {
    background: #1a73e8;
    transform: rotateY(180deg);
}

.memory-card .back {
    background: #34a853;
    transform: rotateY(0deg);
}

#restart-btn {
    padding: 12px 24px;
    font-size: 1.1rem;
    border: none;
    border-radius: 8px;
    background: #1a73e8;
    color: white;
    cursor: pointer;
    transition: background 0.2s ease;
    margin-top: 20px;
}

#restart-btn:hover {
    background: #1557b0;
}
</style>

<script>
const cards = [
    { id: 1, content: 'Reduce food waste by planning meals' },
    { id: 1, content: 'Make a shopping list and stick to it' },
    { id: 2, content: 'Store food properly' },
    { id: 2, content: 'Use airtight containers and proper temperatures' },
    { id: 3, content: 'Use leftovers creatively' },
    { id: 3, content: 'Transform extras into new meals' },
    { id: 4, content: 'Compost food scraps' },
    { id: 4, content: 'Turn waste into nutrient-rich soil' },
    { id: 5, content: 'Check expiration dates' },
    { id: 5, content: 'Use oldest items first' },
    { id: 6, content: 'Freeze excess food' },
    { id: 6, content: 'Preserve food for later use' },
    { id: 7, content: 'Share extra food' },
    { id: 7, content: 'Donate to food banks' },
    { id: 8, content: 'Buy only what you need' },
    { id: 8, content: 'Avoid bulk purchases of perishables' }
];

let hasFlippedCard = false;
let lockBoard = false;
let firstCard, secondCard;
let moves = 0;
let pairs = 0;
let timer = 0;
let gameInterval;

function createBoard() {
    const gameBoard = document.querySelector('.memory-game');
    const shuffledCards = [...cards].sort(() => Math.random() - 0.5);
    
    shuffledCards.forEach(card => {
        const cardElement = document.createElement('div');
        cardElement.classList.add('memory-card');
        cardElement.dataset.id = card.id;
        
        cardElement.innerHTML = `
            <div class="front">${card.content}</div>
            <div class="back">?</div>
        `;
        
        cardElement.addEventListener('click', flipCard);
        gameBoard.appendChild(cardElement);
    });
}

function flipCard() {
    if (lockBoard) return;
    if (this === firstCard) return;
    
    this.classList.add('flipped');
    
    if (!hasFlippedCard) {
        hasFlippedCard = true;
        firstCard = this;
        return;
    }
    
    secondCard = this;
    moves++;
    document.getElementById('moves').textContent = moves;
    checkForMatch();
}

function checkForMatch() {
    const isMatch = firstCard.dataset.id === secondCard.dataset.id;
    isMatch ? disableCards() : unflipCards();
}

function disableCards() {
    firstCard.removeEventListener('click', flipCard);
    secondCard.removeEventListener('click', flipCard);
    pairs++;
    document.getElementById('pairs').textContent = pairs;
    
    if (pairs === 8) {
        clearInterval(gameInterval);
        setTimeout(() => {
            alert(`Congratulations! You won in ${moves} moves and ${timer} seconds!`);
        }, 500);
    }
    
    resetBoard();
}

function unflipCards() {
    lockBoard = true;
    setTimeout(() => {
        firstCard.classList.remove('flipped');
        secondCard.classList.remove('flipped');
        resetBoard();
    }, 1500);
}

function resetBoard() {
    [hasFlippedCard, lockBoard] = [false, false];
    [firstCard, secondCard] = [null, null];
}

function startTimer() {
    gameInterval = setInterval(() => {
        timer++;
        document.getElementById('timer').textContent = timer;
    }, 1000);
}

function restartGame() {
    clearInterval(gameInterval);
    const gameBoard = document.querySelector('.memory-game');
    gameBoard.innerHTML = '';
    moves = 0;
    pairs = 0;
    timer = 0;
    document.getElementById('moves').textContent = moves;
    document.getElementById('pairs').textContent = pairs;
    document.getElementById('timer').textContent = timer;
    createBoard();
    startTimer();
}

document.getElementById('restart-btn').addEventListener('click', restartGame);

// Initialize game
createBoard();
startTimer();
</script>

<%- include('../partials/footer') %> 